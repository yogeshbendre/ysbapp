qnorm(0.95,1100,75)
qnorm(0.95,1100,75/100)
qnorm(0.95,1100,75*75/100)
qnorm
qnorm(0.95,1100,sd=75/10)
0.5*0.5*0.5*0.5*0.5
choose(5,4)
choose(4,5)
choose(5,4)*0.5
choose(5,5)*0.5
3/5!
3/fact(5)
1/40
qpois(10,15)
qpois(15,10)
qpois
qbinom()
qbinom
ppois(10,15)
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
install_course("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/52
2/51
quit()
load(datasets)
load("datasets")
library("datasets")
load(mtcars)
load("mtcars")
data("mtcars")
str(mtcars)
lm(mpg~factor(cyl)+wt,mtcars)
summary(lm(mpg~factor(cyl)+wt,mtcars))
library(ggplot2)
g=ggplot(data=mtcars, aes(y=mpg,x=cyl,fill=cyl))+geom_violin()
g
g=ggplot(data=mtcars, aes(y=mpg,x=cyl,fill=cyl))+geom_violin(color="black",size=2)
g
summary(lm(mpg~factor(cyl)+wt,mtcars))
summary(lm(mpg~factor(cyl)+wt-1,mtcars))
summary(lm(mpg~factor(cyl)+wt,mtcars))
summary(lm(mpg~factor(cyl),mtcars))
summary(lm(mpg~factor(cyl)+wt-1,mtcars))
summary(lm(mpg~factor(cyl)-1,mtcars))
summary(lm(mpg~factor(cyl)+wt,mtcars))
summary(lm(mpg~factor(cyl),mtcars))
fit1=lm(mpg~factor(cyl)+wt,mtcars)
fit2=lm(mpg~factor(cyl),mtcars)
anova(fit1,fit2)
lm.influence(hatvalues(fit1))
hatvalues(fit1)
max(hatvalues(fit1))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
dfbetas(lm(y~x))
install.packages("caret")
vmdata=read.csv("C:\\Users\\ybendre\\Downloads\\ExportList.csv")
head(vmdata)
head(vmdata[vmdata$Status=='Powered On',])
vmdata[vmdata$Status=='Powered On',1]
head(vmdata[vmdata$State=='Powered On',])
pairs(vmdata)
dev.off()
plot(vmdata$Uptime,vmdata$Guest.Mem....)
vmdata[grepl("days",vmdata$Uptime),]
d1=vmdata[grepl("days",vmdata$Uptime),]
plot(d1$Uptime,d1$Guest.Mem....)
d1
length(d1)
length(vmdata)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
qplot(CompressiveStrength,1:dim(training)[1],data=training)
qplot(CompressiveStrength,1:dim(training)[1],data=training,col=Cement)
qplot(CompressiveStrength,1:dim(training)[1],data=training,col=Cement,pch=20)
qplot(CompressiveStrength,1:dim(training)[1],data=training,col=Cement,size=Cement)
qplot(CompressiveStrength,1:dim(training)[1],data=training,size=BlastFurnaceslag)
qplot(CompressiveStrength,1:dim(training)[1],data=training,size=BlastFurnaceSlag)
qplot(1:dim(training)[1],CompressiveStrength,data=training,size=BlastFurnaceSlag)
qplot(1:dim(training)[1],CompressiveStrength,data=training,size=Cement)
names(training)
qplot(1:dim(training)[1],CompressiveStrength,data=training,size=FlyAsh)
qplot(1:dim(training)[1],CompressiveStrength,data=training,size=Superplasticizer)
qplot(1:dim(training)[1],CompressiveStrength,data=training,size=FineAggregate)
qplot(1:dim(training)[1],CompressiveStrength,data=training,size=Age)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(training$Superplasticizer,fill="red")
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
min(training$Superplasticizer)
hist(log10(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grepl("IL",names(training))
grepl("^IL",names(training))
tr2=training[,grepl("^IL",names(training))]
dim(tr2)
dim(training)
pcM=preProcess(log10(tr2+1),method="pca")
pcM
sapply(tr2,var)
pcM=preProcess(tr2,method="pca")
summary(pcM)
pcM=preProcess(tr2,method="pca",pcaComp = 12)
summary(pcM)
pcM$pcaComp
pcM$std
plot(pcM)
pcM$method
tr3=predict(pcM,tr2)
tr3
prComp(tr3)
prcomp(tr3)
plot(prcomp(tr3))
plot(prcomp(tr3),type=1)
plot(prcomp(tr3),type="1")
d=prcomp(tr3)
d$sdev
sum(d[1:7])/sum(d)
sum(d$sdev[1:7])/sum(d$sdev)
sum(d$sdev[1:8])/sum(d$sdev)
sum(d$sdev[1:9])/sum(d$sdev)
tr3$lab = training$diagnosis
t1=train(diagnosis~.,data=training,method="glm")
install.packages("e1072")
install.packages("e1071")
t1=train(diagnosis~.,data=training,method="glm")
t2=train(diagnosis~.,data=tr3,method="glm")
t2=train(lab~.,data=tr3,method="glm")
ts1=predict(t1,testing)
t2=train(diagnosis~.,data=tr3[,1:8],method="glm")
t2=train(lab~.,data=tr3[,1:8],method="glm")
tr3
t2=train(lab~.,data=tr3[,-c(9:12)],method="glm")
tes2=testing[,grep("^IL",names(testing))]
tes3=predict(pcM,tes2)
tes3$lab=testing$diagnosis
confusionMatrix(t2)
td=predict(t2,tes3)
confusionMatrix(td)
ts2=predict(t2,tes3)
confusionMatrix(ts2)
confusionMatrix(tes3$lab,ts2)
confusionMatrix(testing$diagnosis,ts1)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
x=c(-2,-1,0,1,2)
plot(x,x*x)
abline()
qplot(x,x*x)
ddata.frame(x=x,y=x*x)
d=data.frame(x=x,y=x*x)
ggplot(y~x)
ggplot(y~x,data=d)
ggplot(d,aes(x=x,y=y))
ggplot(d,aes(x=x,y=y)) + geom_smooth()
x=c(-3,-2,-1,0,1,2,3)
d=data.frame(x=x,y=x*x)
ggplot(d,aes(x=x,y=y)) + geom_smooth()
ggplot(d,aes(x=x,y=y)) + geom_smooth(lw=3)
ggplot(d,aes(x=x,y=y)) + geom_smooth()
ggplot(d,aes(x=x,y=y)) + geom_smooth(size=10)
ggplot(d,aes(x=x,y=y)) + geom_smooth(size=5)
ggplot(d,aes(x=x,y=y)) + geom_smooth(size=3)
ggplot(d,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
randu()
randu
rnorm()
rnorm(5)
x2=rnorm(5)
d2=data.frame(x=x2,y=x2*x2)
ggplot(d,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
x2=c(-3,-2,-1,0,1,2,3)
y2=c(9,4,6,0,1,2,3)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
x2=c(-5,-4,-3,-2,-1,0,1,2,3,4,5)
y2=c(25,16,9,4,1,0,1,4,9,16,25)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
x2=c(-3,-2,-1,0,1,2,3)
y2=c(9,6,1,0,1,4,9)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
y2=c(9,6,7,0,1,4,9)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
x2=c(-5,-4,-3,-2,-1,0,1,2,3)
y2=c(25,16,18,20,22,0,1,4,9)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
x2=c(-5,-4,-3,-2,-1,0,1,2,3,4,5)
y2=c(25,16,18,20,22,0,1,4,9,16,25)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
x2=c(-5,-4,-3,-2,-1,0,1,2,3)
y2=c(25,16,18,20,22,0,1,4,9)
d2=data.frame(x=x2,y=y2)
ggplot(d2,aes(x=x,y=y)) + geom_smooth(size=3) + theme(text = element_text(size=20))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
scp
library(MASS)
?shuttle
summary(shuttle)
m=glm(use~.wind,data=shuttle,family=binomial)
m=glm(use~wind,data=shuttle,family=binomial)
m
coef(m)
exp(coef(m))
0.9686/(1-0.9686)
1/exp(coef(m))
summary(m)
mean(shuttle$wind)
exp(-0.031*0.5-0.25)
m2=glm(use~wind+magn,data=shuttle,family=binomial)
summary(m2)
m2
exp(coef(m2))
exp(coef(m))
m1=glm(use~(1-wind),data=shuttle,family=binomial)
,1
m1
m
1-head(shuttle$wind)
head(shuttle$wind)
head(shuttle$use)
shuttle$use2=shuttle$use
shuttle$use2[,shuttle$use=="auto"]
shuttle$use2[shuttle$use=="auto"]
shuttle$use2[shuttle$use=="auto"]="yesauto"
shuttle$use2[shuttle$use=="auto"]="noauto"
shuttle$use2[shuttle$use=="noauto"]="auto"
head(shuttle$use2)
head(shuttle$use)
m1=glm(use~wind,data=shuttle,family=binomial)
m1
m2
m1
m
m1=glm(use2~wind,data=shuttle,family=binomial)
m1
m2
coef(m1)
coef(m)
m3=glm(use2~wind,data=spray,family=poisson)
data("InsectSprays")
head(InsectSprays)
m3=glm(spray~count,data=InsectSprays,family=poisson)
m3=glm(spray~1+count,data=InsectSprays,family=poisson(link=log))
m3=glm(as.numeric(spray)~1+count,data=InsectSprays,family=poisson(link=log))
m3
summary(m3)
m3=glm(count~1+as.numeric(spray),data=InsectSprays,family=poisson(link=log))
summary(m3)
m3=glm(count~1+spray,data=InsectSprays,family=poisson(link=log))
summary(m3)
2.67/0.05
0.05/2.67
exp(2.67)/exp(0.05)
exp(2.67/0.05)
exp(2.67-0.05)
log(exp(2.67-0.05))
clear
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knot=0
(x>0)*(x-0)
splineterms=(x>0)*(x-0)
xMat=cbind(1,x,splineterms)
yhat=predict(lm(y~xMat-1))
plot(x,y,frame=F,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
m=lm(y~xMat-1)
m
data(mtcars)
summary(mtcars)
plot(mpg,am.data=mtcars)
library(ggplot2)
qplot(mpg,am.data=mtcars)
qplot(mpg,am,data=mtcars)
qplot(am,mpg,data=mtcars)
cor(mtcars)
heatmap(cor(mtcars))
heatmap(abs(cor(mtcars)))
abs(cor(mtcars))
heatmap(abs(cor(mtcars)))
library(gplots)
heatmap.2(abs(cor(mtcars)))
heatmap.2(cor(mtcars))
dev.off()
heatmap.2(cor(mtcars))
mtcars[,"wt"]
mtcars[,c("wt",",pg")]
mtcars[,c("wt","mpg")]
t.test(mpg~am,data=mtcars,paired=F,var.equal=F)
heatmap.2(abs(cor(mtcars)))
cor(mtcars)[,"mtcars"]
cor(mtcars)
qplot(qsec,mpg,data=mtcars)
dev.off()
qplot(qsec,mpg,data=mtcars)
lm_fit=lm(mpg~wt+factor(cyl)+factor(am),data=mtcars)
qplot(lm_fit)
mtcars_pred=mtcars[,"mpg"]
mtcars_pred
mtcars_pred=data.frame("mpg"=mtcars[,"mpg"])
mtcars_pred
mtcars_pred=data.frame("mpg"=mtcars[,"mpg"])
mtcars_pred["pred"]=mtcars[,"mpg"]
mtcars_pred["model"]=0*mtcars_pred["pred"]
print(mtcars_pred)
lm_fit=lm(mpg~factor(am),data=mtcars)
print(lm_fit)
summary(lm_fit)$coef
predict(lm_fit,data=mtcars)
pr=predict(lm_fit,data=mtcars)
pr
dim(pr)
length(pr)
pr[0]
pr[0,1]
pr[1]
c(mtcars_pred,data.frame("mpg"=mtcars_pred[,"mpg"],"pred"=predict(lm_fit,data=mtcars),"model"=0*mtcars_pred[,"mpg"]+1))
b=c(mtcars_pred,data.frame("mpg"=mtcars_pred[,"mpg"],"pred"=predict(lm_fit,data=mtcars),"model"=0*mtcars_pred[,"mpg"]+1))
b
b$model
b=rbind(mtcars_pred,data.frame("mpg"=mtcars_pred[,"mpg"],"pred"=predict(lm_fit,data=mtcars),"model"=0*mtcars_pred[,"mpg"]+1))
b
ggplot(data=mtcars_pred,aes(x=mpg,y=pred))+geom_line(aes(colour=model))
mtcars=b
mtcars_pred=b
ggplot(data=mtcars_pred,aes(x=mpg,y=pred))+geom_line(aes(colour=model))
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("shiny")
shiny::runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
data(us.cities)
us.all.cities=us.cities
us.all.cities$pop_level="Medium"
us.all.cities[us.all.cities$pop<=40000,]$pop_level="Less"
us.all.cities[us.all.cities$pop>100000,]$pop_level="High"
head(us.all.cities)
head(us.all.cities,10)
tail(us.all.cities,10)
runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
runApp('C:/MyShiny/YSBApp')
